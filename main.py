import logging

try:
    from aiohttp import TCPConnector, ClientSession
    from colorama import init, Fore
    import argparse
except ImportError as e:
    print(f"[-] Packet not found: {e.name}")

import logging
logging.basicConfig()

from PluginHandler import *
from WorkerHandler import *


class Tool(object):
    __author__ = "@rive_n"
    __version__ = "v1.0"

    def __init__(self, log_level: str = None, remote_host: str = None,
                 remote_port: int = 443, colored: bool = True):
        self.log_level = log_level if log_level and log_level.lower() in ['debug', 'warning', 'info',
                                                                          'error'] else 'error'
        self.colored = colored
        self.logger = logging.getLogger(type(self).__name__)
        self.logger.setLevel(getattr(logging, self.log_level.upper()))

        if self.colored:
            self.log = lambda text, error=None: getattr(self.logger, self.log_level)(
                (Fore.GREEN + text) if text else Fore.RED + error)
        else:
            self.log = lambda text: getattr(self.logger, self.log_level)(text)


if __name__ == '__main__':
    tool = Tool()
    pluginHandler = Plugins().setup()

