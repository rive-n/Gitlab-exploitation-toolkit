class InheritedLinkedList(object):
    # Most simple linked list
    # implementation needed to
    # handle inherited classes
    # and iterate over them after

    # The only thing is that
    # this method is bad because of
    # time difference:
    # Python list can perform index operation in O(1)
    # and List perform this operation in O(n)
    # where N is nodes amount
    def __init__(self):
        self.head = None

    def append(self, data):
        # first we need to check if head already exists
        if self.head is not None:
            node = self.head
            while node.next is not None:
                node = node.next
            else:
                node.next = LinkedListNode(data)
        else:
            self.head = LinkedListNode(data)

    def remove(self, data):
        if self.head:
            node = self.head
            if node.data == data:
                self.head = node.next
            else:
                prev_node = self.head
                node = node.next
                while node is not None:
                    if node and node.data == data:
                        prev_node.next = node.next
                    prev_node = prev_node.next
                    node = node.next

    def __repr__(self):
        nodes = [str(item.data) for item in self.__iter__()]  # <- storing all nodes objects to iterate and collect info
        nodes.append("None")
        return " -> ".join(nodes)

    def __str__(self):
        # Parsing already made in __repr__ method
        # so we should not copy it here and just call
        # __repr__ method
        return self.__repr__()

    def __iter__(self):
        if self.head:
            node = self.head
            while node:
                yield node
                node = node.next


class LinkedListNode(object):
    def __init__(self, data):
        self.next = None
        self.data = data
        self.data_args = dict()

    def __repr__(self):
        return self.data
